// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package eu.pretix.libpretixsync.db;

import io.requery.Persistable;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.QueryAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.BooleanProperty;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import javax.annotation.Generated;

@Generated("io.requery.processor.EntityProcessor")
public class Ticket extends AbstractTicket implements Persistable {
    public static final QueryAttribute<Ticket, Long> ID = 
    new AttributeBuilder<Ticket, Long>("id", Long.class)
    .setProperty(new Property<Ticket, Long>() {
        @Override
        public Long get(Ticket entity) {
            return entity.id;
        }

        @Override
        public void set(Ticket entity, Long value) {
            entity.id = value;
        }
    })
    .setPropertyName("id")
    .setPropertyState(new Property<Ticket, PropertyState>() {
        @Override
        public PropertyState get(Ticket entity) {
            return entity.$id_state;
        }

        @Override
        public void set(Ticket entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(true)
    .setReadOnly(true)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<Ticket, String> ATTENDEE_NAME = 
    new AttributeBuilder<Ticket, String>("attendee_name", String.class)
    .setProperty(new Property<Ticket, String>() {
        @Override
        public String get(Ticket entity) {
            return entity.attendee_name;
        }

        @Override
        public void set(Ticket entity, String value) {
            entity.attendee_name = value;
        }
    })
    .setPropertyName("attendee_name")
    .setPropertyState(new Property<Ticket, PropertyState>() {
        @Override
        public PropertyState get(Ticket entity) {
            return entity.$attendee_name_state;
        }

        @Override
        public void set(Ticket entity, PropertyState value) {
            entity.$attendee_name_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<Ticket, String> VARIATION = 
    new AttributeBuilder<Ticket, String>("variation", String.class)
    .setProperty(new Property<Ticket, String>() {
        @Override
        public String get(Ticket entity) {
            return entity.variation;
        }

        @Override
        public void set(Ticket entity, String value) {
            entity.variation = value;
        }
    })
    .setPropertyName("variation")
    .setPropertyState(new Property<Ticket, PropertyState>() {
        @Override
        public PropertyState get(Ticket entity) {
            return entity.$variation_state;
        }

        @Override
        public void set(Ticket entity, PropertyState value) {
            entity.$variation_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<Ticket, Long> VARIATION_ID = 
    new AttributeBuilder<Ticket, Long>("variation_id", Long.class)
    .setProperty(new Property<Ticket, Long>() {
        @Override
        public Long get(Ticket entity) {
            return entity.variation_id;
        }

        @Override
        public void set(Ticket entity, Long value) {
            entity.variation_id = value;
        }
    })
    .setPropertyName("variation_id")
    .setPropertyState(new Property<Ticket, PropertyState>() {
        @Override
        public PropertyState get(Ticket entity) {
            return entity.$variation_id_state;
        }

        @Override
        public void set(Ticket entity, PropertyState value) {
            entity.$variation_id_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<Ticket, String> SECRET = 
    new AttributeBuilder<Ticket, String>("secret", String.class)
    .setProperty(new Property<Ticket, String>() {
        @Override
        public String get(Ticket entity) {
            return entity.secret;
        }

        @Override
        public void set(Ticket entity, String value) {
            entity.secret = value;
        }
    })
    .setPropertyName("secret")
    .setPropertyState(new Property<Ticket, PropertyState>() {
        @Override
        public PropertyState get(Ticket entity) {
            return entity.$secret_state;
        }

        @Override
        public void set(Ticket entity, PropertyState value) {
            entity.$secret_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(true)
    .build();

    public static final QueryAttribute<Ticket, String> ORDER = 
    new AttributeBuilder<Ticket, String>("order_code", String.class)
    .setProperty(new Property<Ticket, String>() {
        @Override
        public String get(Ticket entity) {
            return entity.order;
        }

        @Override
        public void set(Ticket entity, String value) {
            entity.order = value;
        }
    })
    .setPropertyName("order")
    .setPropertyState(new Property<Ticket, PropertyState>() {
        @Override
        public PropertyState get(Ticket entity) {
            return entity.$order_state;
        }

        @Override
        public void set(Ticket entity, PropertyState value) {
            entity.$order_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<Ticket, Boolean> REQUIRE_ATTENTION = 
    new AttributeBuilder<Ticket, Boolean>("require_attention", boolean.class)
    .setProperty(new BooleanProperty<Ticket>() {
        @Override
        public Boolean get(Ticket entity) {
            return entity.require_attention;
        }

        @Override
        public void set(Ticket entity, Boolean value) {
            if(value != null) {
                entity.require_attention = value;
            }
        }

        @Override
        public boolean getBoolean(Ticket entity) {
            return entity.require_attention;
        }

        @Override
        public void setBoolean(Ticket entity, boolean value) {
            entity.require_attention = value;
        }
    })
    .setPropertyName("require_attention")
    .setPropertyState(new Property<Ticket, PropertyState>() {
        @Override
        public PropertyState get(Ticket entity) {
            return entity.$require_attention_state;
        }

        @Override
        public void set(Ticket entity, PropertyState value) {
            entity.$require_attention_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setDefaultValue("0")
    .build();

    public static final QueryAttribute<Ticket, Boolean> PAID = 
    new AttributeBuilder<Ticket, Boolean>("paid", boolean.class)
    .setProperty(new BooleanProperty<Ticket>() {
        @Override
        public Boolean get(Ticket entity) {
            return entity.paid;
        }

        @Override
        public void set(Ticket entity, Boolean value) {
            entity.paid = value;
        }

        @Override
        public boolean getBoolean(Ticket entity) {
            return entity.paid;
        }

        @Override
        public void setBoolean(Ticket entity, boolean value) {
            entity.paid = value;
        }
    })
    .setPropertyName("paid")
    .setPropertyState(new Property<Ticket, PropertyState>() {
        @Override
        public PropertyState get(Ticket entity) {
            return entity.$paid_state;
        }

        @Override
        public void set(Ticket entity, PropertyState value) {
            entity.$paid_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final QueryAttribute<Ticket, String> ITEM = 
    new AttributeBuilder<Ticket, String>("item", String.class)
    .setProperty(new Property<Ticket, String>() {
        @Override
        public String get(Ticket entity) {
            return entity.item;
        }

        @Override
        public void set(Ticket entity, String value) {
            entity.item = value;
        }
    })
    .setPropertyName("item")
    .setPropertyState(new Property<Ticket, PropertyState>() {
        @Override
        public PropertyState get(Ticket entity) {
            return entity.$item_state;
        }

        @Override
        public void set(Ticket entity, PropertyState value) {
            entity.$item_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<Ticket, Boolean> REDEEMED = 
    new AttributeBuilder<Ticket, Boolean>("redeemed", boolean.class)
    .setProperty(new BooleanProperty<Ticket>() {
        @Override
        public Boolean get(Ticket entity) {
            return entity.redeemed;
        }

        @Override
        public void set(Ticket entity, Boolean value) {
            entity.redeemed = value;
        }

        @Override
        public boolean getBoolean(Ticket entity) {
            return entity.redeemed;
        }

        @Override
        public void setBoolean(Ticket entity, boolean value) {
            entity.redeemed = value;
        }
    })
    .setPropertyName("redeemed")
    .setPropertyState(new Property<Ticket, PropertyState>() {
        @Override
        public PropertyState get(Ticket entity) {
            return entity.$redeemed_state;
        }

        @Override
        public void set(Ticket entity, PropertyState value) {
            entity.$redeemed_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final QueryAttribute<Ticket, Long> ITEM_ID = 
    new AttributeBuilder<Ticket, Long>("item_id", Long.class)
    .setProperty(new Property<Ticket, Long>() {
        @Override
        public Long get(Ticket entity) {
            return entity.item_id;
        }

        @Override
        public void set(Ticket entity, Long value) {
            entity.item_id = value;
        }
    })
    .setPropertyName("item_id")
    .setPropertyState(new Property<Ticket, PropertyState>() {
        @Override
        public PropertyState get(Ticket entity) {
            return entity.$item_id_state;
        }

        @Override
        public void set(Ticket entity, PropertyState value) {
            entity.$item_id_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final Type<Ticket> $TYPE = new TypeBuilder<Ticket>(Ticket.class, "Ticket")
    .setBaseType(AbstractTicket.class)
    .setCacheable(false)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<Ticket>() {
        @Override
        public Ticket get() {
            return new Ticket();
        }
    })
    .setProxyProvider(new Function<Ticket, EntityProxy<Ticket>>() {
        @Override
        public EntityProxy<Ticket> apply(Ticket entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(ORDER)
    .addAttribute(ITEM)
    .addAttribute(VARIATION)
    .addAttribute(REQUIRE_ATTENTION)
    .addAttribute(VARIATION_ID)
    .addAttribute(PAID)
    .addAttribute(ITEM_ID)
    .addAttribute(ATTENDEE_NAME)
    .addAttribute(ID)
    .addAttribute(SECRET)
    .addAttribute(REDEEMED)
    .build();

    private PropertyState $id_state;

    private PropertyState $attendee_name_state;

    private PropertyState $variation_state;

    private PropertyState $variation_id_state;

    private PropertyState $secret_state;

    private PropertyState $order_state;

    private PropertyState $require_attention_state;

    private PropertyState $paid_state;

    private PropertyState $item_state;

    private PropertyState $redeemed_state;

    private PropertyState $item_id_state;

    private final transient EntityProxy<Ticket> $proxy = new EntityProxy<Ticket>(this, $TYPE);

    public Ticket() {
    }

    public Long getId() {
        return $proxy.get(ID);
    }

    public String getAttendee_name() {
        return $proxy.get(ATTENDEE_NAME);
    }

    public void setAttendee_name(String attendee_name) {
        $proxy.set(ATTENDEE_NAME, attendee_name);
    }

    public String getVariation() {
        return $proxy.get(VARIATION);
    }

    public void setVariation(String variation) {
        $proxy.set(VARIATION, variation);
    }

    public Long getVariation_id() {
        return $proxy.get(VARIATION_ID);
    }

    public void setVariation_id(Long variation_id) {
        $proxy.set(VARIATION_ID, variation_id);
    }

    public String getSecret() {
        return $proxy.get(SECRET);
    }

    public void setSecret(String secret) {
        $proxy.set(SECRET, secret);
    }

    public String getOrder() {
        return $proxy.get(ORDER);
    }

    public void setOrder(String order) {
        $proxy.set(ORDER, order);
    }

    public boolean isRequire_attention() {
        return $proxy.get(REQUIRE_ATTENTION);
    }

    public void setRequire_attention(boolean require_attention) {
        $proxy.set(REQUIRE_ATTENTION, require_attention);
    }

    public boolean isPaid() {
        return $proxy.get(PAID);
    }

    public void setPaid(boolean paid) {
        $proxy.set(PAID, paid);
    }

    public String getItem() {
        return $proxy.get(ITEM);
    }

    public void setItem(String item) {
        $proxy.set(ITEM, item);
    }

    public boolean isRedeemed() {
        return $proxy.get(REDEEMED);
    }

    public void setRedeemed(boolean redeemed) {
        $proxy.set(REDEEMED, redeemed);
    }

    public Long getItem_id() {
        return $proxy.get(ITEM_ID);
    }

    public void setItem_id(Long item_id) {
        $proxy.set(ITEM_ID, item_id);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof Ticket && ((Ticket)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
